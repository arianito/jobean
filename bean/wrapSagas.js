"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var effects_1 = require("redux-saga/effects");
var BeanFactory_1 = require("./BeanFactory");
var Act_1 = require("./Act");
// wrap any generator function into single saga scoped operation
// server side used to set server side flag to prevent user to reload server initialized data
exports.wrapSagas = function (payload, procedure, server) {
    var action, objs, operation, result, result_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                action = BeanFactory_1.BeanFactory.decompose(payload.type);
                objs = __assign({}, payload);
                delete objs.done;
                delete objs.cookies;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 7, 11, 16]);
                return [4 /*yield*/, effects_1.select(function (state) { return state[action.bean][action.act]; })];
            case 2:
                operation = (_a.sent()) || {};
                return [5 /*yield**/, __values(procedure(__assign({}, payload, { operation: operation })))];
            case 3:
                result = (_a.sent()) || null;
                // pass the result to reducer
                return [4 /*yield*/, effects_1.put({
                        type: BeanFactory_1.BeanFactory.compose(action.bean, action.act, Act_1.ActStatus.succeed),
                        result: result,
                        payload: objs,
                        server: server,
                    })];
            case 4:
                // pass the result to reducer
                _a.sent();
                if (!payload.done) return [3 /*break*/, 6];
                return [4 /*yield*/, effects_1.call(payload.done, true, result)];
            case 5:
                _a.sent();
                _a.label = 6;
            case 6: return [3 /*break*/, 16];
            case 7:
                result_1 = _a.sent();
                // pass the error generated by body into reducer
                return [4 /*yield*/, effects_1.put({
                        type: BeanFactory_1.BeanFactory.compose(action.bean, action.act, Act_1.ActStatus.failed),
                        result: result_1,
                        payload: objs,
                        server: server,
                    })];
            case 8:
                // pass the error generated by body into reducer
                _a.sent();
                if (!payload.done) return [3 /*break*/, 10];
                return [4 /*yield*/, effects_1.call(payload.done, false, result_1)];
            case 9:
                _a.sent();
                _a.label = 10;
            case 10: return [3 /*break*/, 16];
            case 11: return [4 /*yield*/, effects_1.cancelled()];
            case 12:
                if (!_a.sent()) return [3 /*break*/, 15];
                return [4 /*yield*/, effects_1.put({
                        type: BeanFactory_1.BeanFactory.compose(action.bean, action.act, Act_1.ActStatus.canceled),
                        result: null,
                        payload: objs,
                        server: server,
                    })];
            case 13:
                _a.sent();
                if (!payload.done) return [3 /*break*/, 15];
                return [4 /*yield*/, effects_1.call(payload.done, null, null)];
            case 14:
                _a.sent();
                _a.label = 15;
            case 15: return [7 /*endfinally*/];
            case 16: return [2 /*return*/];
        }
    });
};
